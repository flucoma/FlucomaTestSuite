TestFluidSpectralShape : FluidUnitTest {
	classvar expectedResultDrums, expectedResultStereo;

	*initClass {
		expectedResultDrums = TextFileToArray(
			File.realpath(TestFluidSpectralShape.class.filenameSymbol).dirname.withTrailingSlash ++ "SpectralShape.flucoma"
		);
		expectedResultStereo = TextFileToArray(
			File.realpath(TestFluidSpectralShape.class.filenameSymbol).dirname.withTrailingSlash ++ "SpectralShapeStereo.flucoma"
		);
	}

	test_drums_mono {
		var fftsize = 256;
		var hopsize = fftsize / 2;
		var expectedResult = true;

		if(expectedResultDrums.isNil, { result = "failure: could not read binary file"; ^nil; });

		FluidBufSpectralShape.process(
			server,
			source: drumsBuffer,
			features: resultBuffer,
			fftSize: fftsize,
			hopSize: hopsize
		).wait;

		result[\numStats] = TestResult(resultBuffer.numChannels, 7);
		result[\numFrames] = TestResult(
			resultBuffer.numFrames,
			((drumsBuffer.numFrames / hopsize) + 1).asInteger
		);

		resultBuffer.loadToFloatArray(action: { | resultArray |
			result[\expectedSize] = TestResult(resultArray.size, expectedResultDrums.size);
			result[\sampleValues] = TestResultEquals(resultArray, expectedResultDrums, 0.00001);
		});
	}

	test_noise_mono {
		FluidBufSpectralShape.process(
			server,
			source: positiveNoiseBuffer,
			features: resultBuffer,
			windowSize: 64,
			hopSize: 16,
			padding: 2
		).wait;

		result[\numStats] = TestResult(resultBuffer.numChannels, 7);
		result[\numFrames] = TestResult(resultBuffer.numFrames, 10);

		resultBuffer.getn(0, resultBuffer.numFrames * resultBuffer.numChannels, { | samples |
			result[\sampleValues] = TestResultEquals(samples,
				[ 7930.4399414062, 7026.0805664062, 0.48917156457901, 1.8639147281647, 20584.005859375, -1.8052467107773, 10.623335838318, 7738.1220703125, 7294.5732421875, 0.50921058654785, 1.8412227630615, 20523.458984375, -2.4376680850983, 14.529705047607, 7185.302734375, 7348.6831054688, 0.60208290815353, 1.9261736869812, 20575.59375, -3.7935562133789, 17.723602294922, 7434.5795898438, 7499.2895507812, 0.58296591043472, 1.9151527881622, 20762.466796875, -3.2874293327332, 17.821960449219, 7471.5419921875, 7056.0600585938, 0.48401588201523, 1.8925335407257, 19570.224609375, -3.4026544094086, 18.002248764038, 7253.189453125, 7426.0747070312, 0.5776252746582, 1.9131926298141, 20686.0, -3.6653487682343, 18.604253768921, 7211.908203125, 7306.9155273438, 0.56235831975937, 1.9035952091217, 20247.953125, -3.7596786022186, 18.451490402222, 7153.904296875, 7057.5107421875, 0.5955131649971, 1.9583666324615, 19600.376953125, -2.6155300140381, 15.970516204834, 6488.2607421875, 6692.3569335938, 0.89786946773529, 2.4214899539948, 19308.103515625, -3.2997465133667, 12.828915596008, 8147.8725585938, 6431.6396484375, 0.64810931682587, 2.2499251365662, 20224.9296875, -0.94618248939514, 5.278395652771 ], 0.00001);
		});
	}

	test_stereo {

		if(expectedResultStereo.isNil, { result = "failure: could not read binary file"; ^nil; });

		FluidBufSpectralShape.process(
			server,
			source: stereoBuffer,
			features: resultBuffer,
			windowSize: 999,
			hopSize: 333,
			padding: 2
		).wait;

		result[\numStats] = TestResult(resultBuffer.numChannels, 14);
		result[\numFrames] = TestResult(
			resultBuffer.numFrames,
			((stereoBuffer.numFrames / 333) + 2).ceil.asInteger
		);

		resultBuffer.loadToFloatArray(action: { | samples |
			result[\sampleValues] = TestResultEquals(samples, expectedResultStereo, 0.00001);
		});
	}

	test_toy {
		FluidBufSpectralShape.process(
			server,
			source: sineBurstBuffer,
			features: resultBuffer,
			windowSize: 800,
			hopSize: 600,
			fftSize: 8192,
			padding: 0
		).wait;

		result[\numStats] = TestResult(resultBuffer.numChannels, 7);
		result[\numFrames] = TestResult(resultBuffer.numFrames, 29);

		resultBuffer.getn(0, resultBuffer.numFrames * resultBuffer.numChannels, { | samples |
			result[\sampleValues] = TestResultEquals(samples,
				[11025.0, 6366.8408203125, 3.124682572504e-16, 1.799999833107, 20947.23046875, -1.2938381269145e-11, 0.0, 11025.0, 6366.8408203125, 3.124682572504e-16, 1.799999833107, 20947.23046875, -1.2938381269145e-11, 0.0, 11025.0, 6366.8408203125, 3.124682572504e-16, 1.799999833107, 20947.23046875, -1.2938381269145e-11, 0.0, 11025.0, 6366.8408203125, 3.124682572504e-16, 1.799999833107, 20947.23046875, -1.2938381269145e-11, 0.0, 11025.0, 6366.8408203125, 3.124682572504e-16, 1.799999833107, 20947.23046875, -1.2938381269145e-11, 0.0, 11025.0, 6366.8408203125, 3.124682572504e-16, 1.799999833107, 20947.23046875, -1.2938381269145e-11, 0.0, 11025.0, 6366.8408203125, 3.124682572504e-16, 1.799999833107, 20947.23046875, -1.2938381269145e-11, 0.0, 11025.0, 6366.8408203125, 3.124682572504e-16, 1.799999833107, 20947.23046875, -1.2938381269145e-11, 0.0, 11025.0, 6366.8408203125, 3.124682572504e-16, 1.799999833107, 20947.23046875, -1.2938381269145e-11, 0.0, 11025.0, 6366.8408203125, 3.124682572504e-16, 1.799999833107, 20947.23046875, -1.2938381269145e-11, 0.0, 11025.0, 6366.8408203125, 3.124682572504e-16, 1.799999833107, 20947.23046875, -1.2938381269145e-11, 0.0, 11025.0, 6366.8408203125, 3.124682572504e-16, 1.799999833107, 20947.23046875, -1.2938381269145e-11, 0.0, 11025.0, 6366.8408203125, 3.124682572504e-16, 1.799999833107, 20947.23046875, -1.2938381269145e-11, 0.0, 4177.5317382812, 5645.916015625, 1.5812504291534, 4.4182486534119, 17772.873046875, -5.9185757637024, 26.33763885498, 221.93180847168, 63.512382507324, 37.435520172119, 5966.6352539062, 290.17691040039, -95.712249755859, 45.708141326904, 3006.7836914062, 5072.484375, 2.0996351242065, 6.503839969635, 16072.08984375, -8.8233032226562, 34.387718200684, 11025.0, 6366.8408203125, 3.124682572504e-16, 1.799999833107, 20947.23046875, -1.2938381269145e-11, 0.0, 11025.0, 6366.8408203125, 3.124682572504e-16, 1.799999833107, 20947.23046875, -1.2938381269145e-11, 0.0, 11025.0, 6366.8408203125, 3.124682572504e-16, 1.799999833107, 20947.23046875, -1.2938381269145e-11, 0.0, 11025.0, 6366.8408203125, 3.124682572504e-16, 1.799999833107, 20947.23046875, -1.2938381269145e-11, 0.0, 11025.0, 6366.8408203125, 3.124682572504e-16, 1.799999833107, 20947.23046875, -1.2938381269145e-11, 0.0, 11025.0, 6366.8408203125, 3.124682572504e-16, 1.799999833107, 20947.23046875, -1.2938381269145e-11, 0.0, 11025.0, 6366.8408203125, 3.124682572504e-16, 1.799999833107, 20947.23046875, -1.2938381269145e-11, 0.0, 11025.0, 6366.8408203125, 3.124682572504e-16, 1.799999833107, 20947.23046875, -1.2938381269145e-11, 0.0, 11025.0, 6366.8408203125, 3.124682572504e-16, 1.799999833107, 20947.23046875, -1.2938381269145e-11, 0.0, 11025.0, 6366.8408203125, 3.124682572504e-16, 1.799999833107, 20947.23046875, -1.2938381269145e-11, 0.0, 11025.0, 6366.8408203125, 3.124682572504e-16, 1.799999833107, 20947.23046875, -1.2938381269145e-11, 0.0, 11025.0, 6366.8408203125, 3.124682572504e-16, 1.799999833107, 20947.23046875, -1.2938381269145e-11, 0.0, 11025.0, 6366.8408203125, 3.124682572504e-16, 1.799999833107, 20947.23046875, -1.2938381269145e-11, 0.0], 0.00001);
		});
	}
}