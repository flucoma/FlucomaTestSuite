TestFluidKMeans : FluidUnitTest {
	classvar points;

	*initClass {
		points = [ [ -0.41571671534772, -0.83823851613786 ], [ 0.27522460220319, 0.50056113737353 ], [ 0.37603881475526, -0.35813328577873 ], [ 0.74855813963039, -0.20023172520014 ], [ 0.77986972699897, -0.74186942831599 ], [ 0.4881146845814, -0.57628417212915 ], [ 0.49418778010974, -0.76932079055774 ], [ 0.57571127665289, -0.70281288472521 ], [ 0.88753866353823, -0.64933569542769 ], [ -0.4991662215903, 0.69167209496061 ], [ -0.31504798252201, -0.76555563778856 ], [ 0.48348363472565, -0.81205961015156 ], [ -0.50936533542197, 0.83038481193971 ], [ -0.66340165228682, -0.69400244270217 ], [ 0.2742928024029, -0.78426291016174 ], [ 0.39374313668933, 0.53808941965654 ], [ -0.42858570127592, 0.27064486317666 ], [ 0.12177464199588, 0.30730217499337 ], [ -0.49687288996297, -0.77879253206744 ], [ 0.65102988139827, 0.3175898497633 ], [ 0.3878527679696, 0.18669182682887 ], [ 0.47478848034808, -0.34077526597727 ], [ -0.28757556982893, 0.79077646694094 ], [ -0.33685461291647, 0.68850811937315 ], [ 0.8552412292368, -0.19538590017377 ], [ 0.29249439665296, 0.80438526440109 ], [ -0.41743294463711, 0.42644738650618 ], [ 0.53897288397041, -0.69185647463395 ], [ 0.46722457967612, 0.7462953187515 ], [ 0.55490712777663, 0.38529323043465 ], [ -0.4669982920391, -0.58888110802296 ], [ 0.44883691928275, -0.26308684054713 ], [ -0.47226851455412, -0.30621388343097 ], [ 0.22901075017128, 0.37763490762342 ], [ 0.31968568962675, -0.61187668258951 ], [ 0.59919733869526, -0.23430518637476 ], [ 0.46802783841221, 0.5318743726398 ], [ -0.56480628131093, 0.93117387497936 ], [ 0.45625633076751, -0.47206916045553 ], [ 0.2798843721069, 0.33350175797065 ], [ -0.26802571059713, -0.4079614363461 ], [ -0.38562313112299, 0.51414004970118 ], [ -0.45767274815025, -0.46976592995577 ], [ 0.57825258230667, 0.61216988909079 ], [ 0.51310418927145, 0.88999897051545 ], [ -0.30404535104657, 0.48070159064572 ], [ -0.23816204174368, 0.16583776014913 ], [ 0.65772969865676, -0.59265685474166 ], [ 0.34810397906085, 0.094667371858273 ], [ -0.16893672794625, 0.55973069202037 ], [ 0.43306758096199, 0.54304790343758 ], [ -0.60207901698364, 0.77348669826068 ], [ 0.61281890800276, 0.57594176928895 ], [ -0.33984604229283, -0.39206752718928 ], [ 0.58719565009712, 0.69243968916434 ], [ 0.090417632861163, 0.6116972585612 ], [ 0.65988926488829, -0.59251750280739 ], [ -0.31468450625785, 0.64491497259072 ], [ 0.37112017978368, 0.39345604711473 ], [ 0.49080837207076, 0.90622205113504 ], [ -0.54662441449088, -0.18954604996057 ], [ 0.46761615176929, 0.38554410591897 ], [ -0.59690056994435, 0.57097348636461 ], [ 0.31112826210316, -0.47323723299022 ], [ 0.33995201748865, -0.42132171790528 ], [ -0.80275963836276, 0.4164528208367 ], [ -0.69124878106578, -0.75189955514102 ], [ 0.36640261541581, -0.3587710786836 ], [ -0.65300959170065, 0.41374374541487 ], [ -0.55087611089521, 0.23115916311648 ], [ -0.35917779082221, 0.53233072512537 ], [ 0.52342619352283, -0.45720970923425 ], [ 0.3893601464641, -0.30397347001802 ], [ -0.49400538950859, -0.21345597506764 ], [ 0.80363920656624, 0.70810763719032 ], [ -0.53046714368558, 0.3838294829282 ], [ -0.53115692402552, -0.52665430215589 ], [ 0.26265913368132, -0.37045374257842 ], [ 0.58842140161197, 0.39176954882396 ], [ 0.75381484329974, 0.54097367227574 ], [ -0.50759192680699, -0.53179416388 ], [ 0.43223780095294, -0.74918305777676 ], [ 0.27961710705268, 0.40743620968452 ], [ 0.25421512751037, 0.28530445404792 ], [ -0.45469593099226, -0.456214100411 ], [ -0.36499534152528, -0.52173860667119 ], [ 0.42652120158128, 0.60378974658039 ], [ 0.46875985151457, -0.57154860265716 ], [ 0.3325033797045, -0.4822912953395 ], [ 0.35376215462712, 0.48081381338621 ], [ -0.54450994375214, 0.6371378373109 ], [ -0.48872095780504, 0.40428616419926 ], [ -0.63363803479673, 0.64186710110819 ], [ 0.31580656260976, 0.24915574439677 ], [ 0.50146273019176, -0.41066746843858 ], [ 0.51023719250736, 0.49686174164369 ], [ 0.31406708875067, 0.44896233808802 ], [ 0.60355403015601, -0.49737838523642 ], [ -0.52772795247369, -0.59831187281396 ], [ -0.31180967839028, 0.46433856670203 ], [ 0.56439463176569, -0.18570476521856 ], [ 0.47454576449127, -0.63155963286195 ], [ -0.25099411563294, 0.8739459937135 ], [ 0.41763400041726, -0.18970888294287 ], [ -0.6364587514257, -0.54383880639468 ], [ 0.44412920660029, 0.285368531447 ], [ -0.23504614087233, 0.53360982085706 ], [ 0.5666057758832, -0.49889232629544 ], [ -0.46502124826848, -0.70533626319552 ], [ 0.4125500533603, -0.17067273588838 ], [ -0.39461015881358, -0.24810978850794 ], [ 0.61449231670996, -0.14807942235941 ], [ 0.77248457134356, 0.38631503417992 ], [ 0.37799973546947, -0.16790004585718 ], [ 0.53327721025286, 0.30328786138233 ], [ -0.68922740556448, -0.57209595467154 ], [ 0.76791883071621, -0.69990844227435 ], [ 0.48495883936242, 0.72889413851272 ], [ 0.89699203556385, 0.58266277910308 ], [ 0.36594443714994, -0.39920604480047 ], [ -0.60254833735996, 0.7667936971969 ], [ 0.70712235316435, 0.44382775828228 ], [ -0.72077801244817, -0.4884962313751 ], [ -0.84789894313562, -0.78730974570312 ], [ -0.560977243616, 0.47012610941563 ], [ -0.48421794734106, 0.32231476894077 ], [ -0.78640775940111, -0.29074928285957 ], [ 0.65180807886475, 0.42613742256259 ] ];
	}

	test_2d_points {
		var condition = Condition();
		var dataSet = FluidDataSet(server);
		var clusters = FluidLabelSet(server);
		var kmeans = FluidKMeans(server);
		var centroids = FluidDataSet(server);

		var d = Dictionary.with(
			*[\cols -> 2,\data -> Dictionary.newFrom(
				points.collect{|x, i| [i, x]}.flatten)]);

		var inbuf = Buffer.loadCollection(server,0.5.dup);

		var b = Buffer.sendCollection(server,[0.5,0.5]);
		var c = Buffer(server);

		server.sync;

		dataSet.load(d);

		server.sync;

		kmeans.fitPredict(dataSet, clusters, action: {|c|
			result[\cluster0_size] = TestResult(c[0].asInteger, 24);
			result[\cluster1_size] = TestResult(c[1].asInteger, 28);
			result[\cluster2_size] = TestResult(c[2].asInteger, 38);
			result[\cluster3_size] = TestResult(c[3].asInteger, 38);
			condition.unhang;
		});

		condition.hang;

		kmeans.dump { | x |
			var means_sorted = x["means"].sort; //sort cause seeding screws the order
			result[\cols] = TestResult(x["cols"].asInteger, 2);
			result[\rows] = TestResult(x["rows"].asInteger, 4);
			result[\means] = TestResultEquals(means_sorted, [ [ -0.52309581198746, -0.52779290468541 ], [ 0.46590930269756, 0.48694928284499 ], [ 0.50557697542176, -0.46780285342384 ], [ -0.45224895310928, 0.55111888801696 ] ], 0.0001);
			condition.unhang;
		};

		condition.hang;

		centroids.load(Dictionary.newFrom([\cols, 2, \data, Dictionary.newFrom([\0, [0.5,0.5], \1, [-0.5,0.5], \2, [0.5,-0.5], \3, [-0.5,-0.5]])]));

		server.sync;

		kmeans.setMeans(centroids, {
			kmeans.predict(dataSet,clusters,{
				clusters.dump{|x|
					var count = 0.dup(4);
					x["data"].keysValuesDo{|k,v|count[v[0].asInteger] = count[v[0].asInteger] + 1;};
					result[\count] = TestResult(count, [38, 28, 38, 24]);
					condition.unhang
				}
			})
		});

		condition.hang;

		kmeans.transformPoint(b,c,{|x|
			result[\cluster_distance_size] = TestResult(x.numFrames, 4);
			x.getn(0,x.numFrames,{|y|
				result[\cluster_distance] = TestResult(y, [0.0, 1.0, 1.0, 2.0]);
				condition.unhang
			})
		});

		condition.hang;

		server.sync;
		dataSet.free;
		clusters.free;
		kmeans.free;
		centroids.free;
	}
}